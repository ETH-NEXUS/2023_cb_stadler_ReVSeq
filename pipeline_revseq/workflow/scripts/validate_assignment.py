######
## Script name: validate_assignment.py
## Date: July 2023
## Author: Matteo Carrara (NEXUS Personalized Health Technologies)
##
## Description: Part of the Revseq pipeline. Loads the metadata table from Viollier and
##        adds to the assignment table which viruses are positive according to the
##        clinical tests for comparison with the in-silico assignment
######

import pandas as pd
import argparse, os, glob, math, sys

# Script
if __name__ == '__main__':
	# Parse input args
    parser = argparse.ArgumentParser(description='Add and compare clinical panel results to the virus assignments', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--metadata_dir', required=True, type=str, help='directory containing the metadata files')
    parser.add_argument('--pseudoanon_table', required=True, type=str, help='table containing the pseudoanonymization matching')
    parser.add_argument('--output', required=True, type=str, help='Path and name of the output table')
    parser.add_argument('--ethid', required=True, type=str, help='Anonymized name of the sample to validate')
    parser.add_argument('--match_table', required=True, type=str, help='TSV matching the panel code with the common virus name used in the pipeline')
    parser.add_argument('--count_table', required=True, type=str, help='Major count table as generated by assign_virus.py')
    args = parser.parse_args()

    anontable = pd.read_table(args.pseudoanon_table)
    match_table = pd.read_csv(args.match_table,sep=",", header=0)
    count_table = pd.read_csv(args.count_table,sep="\t")
    metadata_subdirs = [os.path.join(args.metadata_dir, batchdir) for batchdir in os.listdir(args.metadata_dir)]
    metadata_files = [ os.path.join(batchdir, file) for batchdir in metadata_subdirs for file in os.listdir(batchdir) if "Z_ETH_Scan_Extraktionsplatte_Respiratorische Erreger_STEP_03" in file ]
    #all_files = [ os.path.join(metaname, os.listdir(metaname)[0]) for metaname in metadata_subdirs ]
    metadata = pd.concat((pd.read_csv(f, sep=";") for f in metadata_files), ignore_index=True)#all_files), ignore_index=True)
    sample_name = anontable.loc[anontable['ethid'] == args.ethid]['Sample number'].astype(int)
    sample_name = int(sample_name.iloc[0])
    metadata = metadata.loc[metadata['Sample number'] == sample_name]
    if len(metadata.index) == 0:
        sys.exit("ERROR: cannot find the sample name associated to ethid " + args.ethid + " in the metadata table!")
    
    metadata = metadata.to_dict(orient='list')
    positive = []
    for key,value in metadata.items():
        value = value[0]
        try:
            value = float(value)
        except (ValueError, KeyError) as error:
            continue	
        # Current metadata has an empty cell, nan or "deleted" for missing values; 0 or -1 for negatives; 4 or a positive integer >4 for positives
        if (math.isnan(value) or (value <= 0) or (key == 'Sample number') or (key == "Aufnahmenummer")):
            continue
        if value > 0:
            positive.append(key.split(" ")[0])

    common_names = []
    count_table['panel_match'] = ""
    if len(positive) != 0:
        for virus in positive:
            name = match_table.loc[(match_table['panel_name'] == virus),'strain_name']
            if len(name) == 0:
                sys.exit("ERROR: no common virus name found for "+virus+" in the match table!")
            name = name.to_string(index=False).strip()
            common_names.append(name)

        for name in common_names:
            if name not in count_table['name'].to_list():
                sys.exit("ERROR: no common virus name found for "+name+" in the count table!")

        count_table.loc[count_table["name"].isin(common_names), 'panel_match'] = '*'

    count_table.to_csv(args.output, sep="\t", float_format='%.2f')

