######
## Script name: kraken_report_parser.py
## Date: August 2024
## Author: Matteo Carrara (NEXUS Personalized Health Technologies)
##
## Description: Part of the Revseq pipeline. Loads the kraken2 report
##        and generates the list of detected substrains
##        and downloads missing ones
######

import pandas as pd
import argparse, os, sys, re, gzip, shutil, urllib
from Bio import SeqIO


# Script
if __name__ == '__main__':
	# Parse input args
    parser = argparse.ArgumentParser(description='Filters the full consensus list to keep only the consensus sequences of interest', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--report', required=True, type=str, help="The report generated by Kraken2")
    parser.add_argument('--output', required=True, type=str, help="The final list of detected substrains")
    args = parser.parse_args()
    
    stop_flag = 0
    try:
        report = pd.read_table(args.report, header=None)
    except pd.errors.EmptyDataError:
        print("WARNING: Found no Viruses entry in the Kraken2 report. This should only happen on negative samples")
        stop_flag = 1
        open(args.output, 'a').close()
    if stop_flag == 0:
        bacterial_fraction = report.loc[report[5] == '    Bacteria'][0]
        human_fraction = report.loc[report[5] == '                                                              Homo sapiens'][0]

        report_domain = report.loc[report[3] == 'D']
        perform_substrain_evaluation = True
        try:
            virus_position = report_domain.loc[report_domain[5] == '  Viruses'].index.values[0]
        except IndexError:
            print("WARNING: Found no Viruses entry in the Kraken2 report. This should only happen on negative samples")
            substrains_final = pd.DataFrame([{"name": "", "taxon_id": ""}])
            perform_substrain_evaluation = False
        if perform_substrain_evaluation:
            tmp = report_domain.reset_index()
            virus_row = tmp.loc[tmp[5] == '  Viruses'].index[0]
            if virus_row == len(report_domain) - 1:
                virus_end = len(report)
            else:
                #virus_end = report_domain.iloc[virus_row+1]
                virus_end = report_domain.index[virus_row+1]
            viruses = report.loc[range(virus_position, virus_end)]
            virus_strains = viruses[viruses[3].str.contains("S")]
            virus_strains = virus_strains.reset_index()
            virus_S = virus_strains.loc[virus_strains[3] == "S"]
            start = 0
            if len(virus_S) == 1:
                end = len(virus_strains)
                this_strain = virus_strains.loc[range(start, end)]
                this_S = max(this_strain[3])
                this_substrains = this_strain.loc[this_strain[3] == this_S]
                substrains = this_substrains
            else:
                for i in range(1, len(virus_S)):
                    end = virus_S.iloc[i].name
                    this_strain = virus_strains.loc[range(start, end)]
                    this_S = max(this_strain[3])
                    this_substrains = this_strain.loc[this_strain[3] == this_S]
                    try:
                        substrains = pd.concat([substrains, this_substrains])
                    except:
                        substrains = this_substrains
                    start = virus_S.iloc[i].name
            substrains_final = substrains
            substrains_final["name"] = substrains[5].str.strip()
            substrains_final["taxon_id"] = substrains[4]
            substrains_final = substrains_final[["name", "taxon_id"]]
        substrains_final.to_csv(args.output, index=None)