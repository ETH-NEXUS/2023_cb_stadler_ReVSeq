######
## Script name: filter_consensus.py
## Date: August 2023
## Author: Matteo Carrara (NEXUS Personalized Health Technologies)
##
## Description: Part of the Revseq pipeline. Loads the 
##        the viral sequences computed by the pipeline, calculates RPKM,
##        detects outliers and reports the outliers in a dedicated table
######

import pandas as pd
import argparse
from Bio import SeqIO


# Script
if __name__ == '__main__':
	# Parse input args
    parser = argparse.ArgumentParser(description='fetch the primers positions on the reference', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--ref_table', required=True, type=str, help='the bed file listing all the reference viral genomes')
    parser.add_argument('--assignment', required=True, type=str, help='Substrain assignment table generated by assign_virus.py')
    parser.add_argument('--consensus', required=True, type=str, help='Consensus FASTA file generated by BCFTools')
    parser.add_argument('--output', required=True, type=str, help='File where to write the filtered consensus')
    parser.add_argument('--consensus_type', required=True, type=str, help='Filtering type for consensus. Accepted values are "all", "outliers" and "top"')
    args = parser.parse_args()

    refs = pd.read_table(args.ref_table, header=None)
    refs = refs.rename(columns={0: "id", 1: "ref_start", 2: "ref_end", 3: "substrain_name"})
    assignment = pd.read_table(args.assignment, header=0, sep="\t")

    if args.consensus_type == "top":
        print("Calculating consensus only for the top strain")
        filter_values = assignment.loc[assignment["rpkm_proportions"] == max(assignment["rpkm_proportions"])]["name"].to_list()
    elif args.consensus_type == "outliers":
        print("Calculating consensus for all outlier strains")
        filter_values = assignment.loc[assignment["outlier"] == "*"]["name"].to_list()
    elif args.consensus_type == "all":
        print("Calculating consensus all strains")
        filter_values = assignment["name"].to_list()
    else:
        sys.exit("Error: cannot recognize the value assigned to 'consensus_type': " + args.consensus_type)

    if len(filter_values) != 0:
        for strain in filter_values:
            if assignment.loc[assignment["name"] == filter_values[0]]["DP_status"].item() == "FAILED":
                filter_values.remove(strain)

    if assignment["readnum_status"][0] != "SUCCESS":
        filter_values = []

    regions = refs.loc[refs["substrain_name"].isin(filter_values)]["id"].to_list()

    with open(args.output, "w") as out_file:
        fasta_sequences = SeqIO.parse(open(args.consensus),'fasta')
        for fasta in fasta_sequences:
            if fasta.id in regions:
                SeqIO.write(fasta, out_file, "fasta")
