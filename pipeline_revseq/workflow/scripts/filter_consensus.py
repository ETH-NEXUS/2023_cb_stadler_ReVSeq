######
## Script name: filter_consensus.py
## Date: August 2023
## Author: Matteo Carrara (NEXUS Personalized Health Technologies)
##
## Description: Part of the Revseq pipeline. Loads the 
##        the viral sequences computed by the pipeline, calculates RPKM,
##        detects outliers and reports the outliers in a dedicated table
######

import pandas as pd
import argparse
from Bio import SeqIO


# Script
if __name__ == '__main__':
	# Parse input args
    parser = argparse.ArgumentParser(description='fetch the primers positions on the reference', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--ref_table', required=True, type=str, help='the bed file listing all the reference viral genomes')
    parser.add_argument('--assignment', required=True, type=str, help='Substrain assignment table generated by assign_virus.py')
    parser.add_argument('--consensus', required=True, type=str, help='Consensus FASTA file generated by BCFTools')
    parser.add_argument('--output', required=True, type=str, help='File where to write the filtered consensus')
    args = parser.parse_args()

    refs = pd.read_table(args.ref_table, header=None)
    refs = refs.rename(columns={0: "id", 1: "ref_start", 2: "ref_end", 3: "name"})
    assignment = pd.read_table(args.assignment, header=0, sep="\t")

    best_assignment = assignment.loc[assignment["rpkm_proportions"] == max(assignment["rpkm_proportions"])]["name"].to_string(index=False)
    regions = refs.loc[refs["name"] == best_assignment]["id"].to_list()

    with open(args.output, "w") as out_file:
        fasta_sequences = SeqIO.parse(open(args.consensus),'fasta')
        for fasta in fasta_sequences:
            if fasta.id in regions:
                SeqIO.write(fasta, out_file, "fasta")
