from snakemake.utils import min_version
from snakemake.utils import validate

# do not allow subdirectories as part of `sample` or `i` wildcards
wildcard_constraints:
    sample="[^/]+",

# Define minimum Snakemake version
min_version("6.12.1")

# Include Config file
configfile: "config/config.yaml"

# Include rules
include: "rules/misc_snake.smk"
include: "rules/preprocessing.smk"
include: "rules/dehuman.smk"
include: "rules/revseq_basic.smk"
include: "rules/qc.smk"
include: "rules/package_results.smk"

# include local rules
localrules:
    all,

# final rules of pipeline
# defines output
rule all:
    input:
        #####preprocessing
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/merge_lanes/{sample}_merged_R1.fastq.gz", sample = sample_ids, lane = lane_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/merge_lanes/{sample}_merged_R2.fastq.gz", sample = sample_ids, lane = lane_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/trim_galore/{sample}_merged_R1_val_1.fq.gz", sample = sample_ids),
        config["resources"]["reference_dir"]+"/merged_virus_host_ref.fa.bwt",
        #####dehuman
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/bwa/{sample}_mapped_reads.bam", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/cram/{sample}.cram", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/bam_to_fastq/{sample}_bam_to_fastq_r1.fastq", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/dh_fastqc/{sample}_bam_to_fastq_r1_fastqc.zip", sample = sample_ids),
        #####pipeline
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/filter_alignment/{sample}_filter_alignment.bam", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/sort/{sample}_sorted_reads.bam", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/remove_duplicates/{sample}_remove_duplicates.bam", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/pileup/{sample}_pileup.txt", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/idxstats/{sample}_idxstats.txt", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/assign_virus/{sample}_count_table.tsv", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/validate_assignment/{sample}_validation.txt", sample = sample_ids),
        #####qc
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/fastqc_raw/{sample}_L001_R1_001_fastqc.zip", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/fastqc_merged/{sample}_merged_R1.fastqc.zip", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/samtoolsstats/{sample}_samtools_stats.txt", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/rseqc/{sample}_bam_stat.txt", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/{sample}/qualimap/qualimapReport.html", sample = sample_ids),
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/multiqc/multiqc_report.html"),
        #####Final
        expand(config["inputOutput"]["output_dir"]+"/"+config["plate"]+"/package_results/assign_virus/{sample}_count_table.tsv", sample = sample_ids)
    output:
        config["inputOutput"]["output_dir"]+"/complete.txt",
    shell:
        "date > {output}"




