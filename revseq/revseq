#!/bin/bash

## Date: July 2023
## Author: Matteo Carrara (NEXUS Personalized Health Technologies)
##
## Description: Main command interface for the revseq workflow.
## The subcommands allow to trigger: sync raw data from Viollier SFTP server,
## pseudoanonymize samples, start a snakemake dryrun or fullrun,
## upload results back to Viollier
## Commands "runpipeline" and "dryrun" require the plate on which to run as option

. /data/revseq/revseq.conf

case "$1" in
        syncviollier)
                echo "$(date) Sync Viollier"
		cd ${mirror}
                # delete previous partial downloads
                . <(grep '^mirror=' /data/revseq/revseq.conf)
                echo "$(date) Removing partial files from:" "${mirror}/"
                find "${mirror}/" -type f -name '*.filepart' -print0 | xargs -r -0 rm -vi
		# Mirroring samples
                lftp -c "set debug; set cmd:move-background false; \
                        set net:timeout $(( contimeout / retries)); \
                        set net:max-retries ${retries}; \
                        set net:reconnect-interval-base 8; \
                        set xfer:timeout ${iotimeout}; \
                        connect sftp://${fileserver}${srvport:+:${srvport}}; \
                        mirror --continue --no-perms --parallel=${parallel} --loop --target-directory=${mirror}/ ${source}" #; \
                        #mirror --continue --no-perms --parallel=${parallel} --loop --target-directory=${mirror}/ ${metadata}"
	;;
        uploadviollier)
                echo "$(date) Uploading Viollier"
                results=$2
                if [ ! -d ${results} ]; then
                        echo "$(date) ERROR: cannot find pipeline results directory ${results}"
                        exit 1
                else
                        mirror_command=""
                        for dir in ${to_upload[@]}; do
                                mirror_command=$(echo "${mirror_command} mirror --continue --no-perms --parallel=${parallel} --loop --dereference --exclude-glob *.fastq.gz --exclude-glob *_remove_duplicates.bam -R ${results} /${uploaddir};")
                        done
                        lftp -c "set debug; \
                                set cmd:move-background false; \
                                set net:timeout $(( contimeout / retries)); \
                                set net:max-retries ${retries}; \
                                set net:reconnect-interval-base 8; set xfer:timeout ${iotimeout}; \
                                connect sftp://${fileserver}${srvport:+:${srvport}}; \
                                ${mirror_command}"
                fi
        ;;
        pseudoanonymize_samples)
                python \
                        ${scriptdir}/pseudoanonymize_sample_names.py \
                        --mirrordir ${sampledir} \
                        --outdir ${anonymizeddir} #\
                        #--metadatadir ${metadatadir}
        ;;
        dryrun)
		cd ${pipelinedir}
                plate=$2
                if [ ! -f "/data/results/anonymized/${plate}/complete.txt" ]
                then
		        snakemake \
                                --use-conda \
                                --rerun-triggers mtime \
                                -c${threads} \
                                --configfile ${snakemake_config} \
                                --config plate=${plate} \
                                sample_map=/data/results/anonymized/${plate}/${plate}_samplemap.tsv \
                                -n
                fi
                     ;;
        runpipeline)
		cd ${pipelinedir}
                plate=$2
                if [ ! -f "${plate}/complete.txt" ]; then
                        snakemake \
                                --use-conda \
                                --rerun-triggers mtime \
                                -c${threads} \
                                --configfile ${snakemake_config} \
                                --config plate=${plate} \
                                sample_map=${plate}/${plate##*/}_samplemap.tsv
                else
                        echo "$(date) The plate has been already analysed (file ${plate}/complete.txt exists)\nPlease delete the file complete.txt to trigger a new run"
                fi
        ;;
        unlock)
                cd ${pipelinedir}
                plate=$2
                        snakemake \
                        --use-conda \
                        --rerun-triggers mtime \
                        -c${threads} \
                        --configfile ${snakemake_config} \
                        --config plate=${plate} \
                        sample_map=/data/results/anonymized/${plate}/${plate}_samplemap.tsv \
                        --unlock \
                        -n
        ;;
        *)
                echo "$(date) Unkown sub-command ${1}" > /dev/stderr
                exit 2
        ;;
esac
